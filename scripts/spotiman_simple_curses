#!/bin/python

from spotiman.player import Player

import spotipy
import spotipy.util as util
import curses
import threading

import time, sys

user_name = sys.argv[1]

scope = 'user-read-currently-playing user-read-playback-state user-modify-playback-state'
token = util.prompt_for_user_token(user_name, scope)

sp = spotipy.Spotify(auth=token)
sp.trace = False

class CursesApp:

    stdscr = None
    tabs = []
    selected = 0
    player = None
    kill = False

    def __init__(self):

        self.stdscr = curses.initscr()
        curses.curs_set(False)
        curses.start_color()
        curses.use_default_colors()
        curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)
        curses.init_pair(2, curses.COLOR_RED, curses.COLOR_WHITE)
        
        self.player = Player(sp, refresh_interval=1)
        curses.noecho()
        curses.cbreak()
        self.stdscr.keypad(True)
        self.tabs.append(PlaybackMonitor(self.player))        
        self.tabs.append(DeviceMonitor(self.player))        
        self.thr = threading.Thread(target=self.updateScreen)
        self.thr.start()

    def start(self):
        while True:
            c = self.stdscr.getch()
            if c == ord('>'):
                self.player.next()
            elif c == ord('<'):
                self.player.prev()
            elif c == ord('p'):
                if self.player.is_playing:
                    self.player.pause()
                else:
                    self.player.play()
            elif c == ord('s'):
                self.player.stop()
            elif c == ord('f'):
                self.player.seekRel(10)
            elif c == ord('b'):
                self.player.seekRel(-10)
            elif c == curses.KEY_RIGHT:
                self.player.setRelVolume(10)
            elif c == curses.KEY_LEFT:
                self.player.setRelVolume(-10)
            elif c == curses.KEY_UP:
                self.tabs[self.selected].upArrowAction()
            elif c == curses.KEY_DOWN:
                self.tabs[self.selected].downArrowAction()
            elif c == curses.KEY_ENTER or c == 10 or c == 13:
                self.tabs[self.selected].selectAction()
            elif c == ord('1'):
                self.selected = 0
            elif c == ord('2'):
                self.selected = 1
            elif c == ord('q'):
                self.end()
                break

    def updateScreen(self):
        while True:
            if self.kill:
                break
            time.sleep(0.2)
            self.refresh()

    def refresh(self):
        self.tabs[self.selected].draw()

    def end(self):

        self.kill = True
        self.thr.join()
        self.player.kill = True
        self.player.status_thread.join()

        curses.nocbreak()
        self.stdscr.keypad(False)
        self.stdscr.clear()
        curses.echo()
        curses.endwin()

class DeviceMonitor:

    begin_x = 0
    begin_y = 0
    height = 20
    width = 100
    selection = 0

    def __init__(self, player):

        self.height = curses.LINES 
        self.width = curses.COLS 
        self.player = player
        self.win = curses.newwin(self.height, self.width, self.begin_y, self.begin_x)
        self.win.box()
        self.win.refresh()

    def draw(self):

        self.win.clear()
        self.win.box()

        devices = self.player.devices

        for i, device in enumerate(devices):
            if i == self.selection:
                self.win.addstr(i+1, 2, device.name, curses.color_pair(1))
            else:
                self.win.addstr(i+1, 2, device.name)

        self.win.refresh()

    def upArrowAction(self):
        if self.selection > 0:
            self.selection -= 1
        self.draw()

    def downArrowAction(self):
        if self.selection < len(self.player.devices)-1:
            self.selection += 1
        self.draw()

    def selectAction(self):
        self.player.selectDevice(self.selection)

class PlaybackMonitor:

    begin_x = 0
    begin_y = 0
    height = 20
    width = 100
    player = None

    def __init__(self, player):
    
        self.height = curses.LINES 
        self.width = curses.COLS 
        self.player = player
        self.win = curses.newwin(self.height, self.width, self.begin_y, self.begin_x)
        self.win.box()
        self.win.refresh()

    def draw(self):

        self.win.clear()
        self.win.box()

        album = self.player.track.album.name
        track = self.player.track.name
        artist = self.player.track.artists[0].name
        dur = self.player.track.duration_ms
        prog = self.player.progress_ms

        progMMSS = self.player.getProgressMMSS()
        durMMSS = self.player.getDurationMMSS()

        self.win.addstr(self.height//2 - 2, self.width//2-len(album)//2, album, curses.A_BOLD)
        self.win.addstr(self.height//2 - 1, self.width//2-len(track)//2, track)
        self.win.addstr(self.height//2 - 0, self.width//2-len(artist)//2, artist)

        perc = prog/dur

        if self.player.is_playing:
            self.win.addstr(self.height//2 - 2, 8, '|>', curses.A_BOLD)
            self.win.addstr(self.height//2 - 1, 8, '|< |>', curses.A_BOLD)
            self.win.addstr(self.height//2 - 0, 8, '|>', curses.A_BOLD)
        else:
            self.win.addstr(self.height//2 - 2, 8, '|| ||', curses.A_BOLD)
            self.win.addstr(self.height//2 - 1, 8, '|| ||', curses.A_BOLD)
            self.win.addstr(self.height//2 - 0, 8, '|| ||', curses.A_BOLD)

        self.win.addstr(self.height//2+2, 8, '[' + ('-'*(self.width-18)) + ']', 
                curses.color_pair(1) | curses.A_BOLD)
        self.win.addstr(self.height//2+2, 9, ('>'*int((self.width-16)*perc)), 
                curses.color_pair(2) | curses.A_BOLD)
        self.win.addstr(self.height//2+2, 2, durMMSS, curses.A_BOLD)
        self.win.addstr(self.height//2+2, self.width-7, progMMSS, curses.A_BOLD)

        self.win.addstr(self.height//2-2, self.width-10, 'Vol:%3d' % self.player.getVolume())

        self.win.refresh()

    def upArrowAction(self):
        pass

    def downArrowAction(self):
        pass

    def selectAction(self):
        pass

app = CursesApp()

try:
    app.start()
except KeyboardInterrupt:
    app.end()




